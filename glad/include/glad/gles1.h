/**
 * Loader generated by glad 2.0.0-beta on Tue Mar  3 17:33:34 2020
 *
 * Generator: C/C++
 * Specification: gl
 * Extensions: 0
 *
 * APIs:
 *  - gles1:common=1.0
 *
 * Options:
 *  - MX_GLOBAL = True
 *  - ON_DEMAND = False
 *  - LOADER = True
 *  - ALIAS = False
 *  - HEADER_ONLY = False
 *  - DEBUG = False
 *  - MX = True
 *
 * Commandline:
 *    --api='gles1:common=1.0' --extensions='' c --mx-global --loader --mx
 *
 * Online:
 *    http://glad.sh/#api=gles1%3Acommon%3D1.0&extensions=&generator=c&options=MX_GLOBAL%2CLOADER%2CMX
 *
 */

#ifndef GLAD_GLES1_H_
#define GLAD_GLES1_H_

#ifdef __gl_h_
#error OpenGL ES 1 header already included (API: gles1), remove previous include!
#endif
#define __gl_h_ 1

#define GLAD_GLES1
#define GLAD_OPTION_GLES1_MX_GLOBAL
#define GLAD_OPTION_GLES1_LOADER
#define GLAD_OPTION_GLES1_MX

#ifdef __cplusplus
extern "C" {
#endif

#ifndef GLAD_PLATFORM_H_
#define GLAD_PLATFORM_H_

#ifndef GLAD_PLATFORM_WIN32
#if defined(_WIN32) || defined(__WIN32__) || defined(WIN32) || \
    defined(__MINGW32__)
#define GLAD_PLATFORM_WIN32 1
#else
#define GLAD_PLATFORM_WIN32 0
#endif
#endif

#ifndef GLAD_PLATFORM_APPLE
#ifdef __APPLE__
#define GLAD_PLATFORM_APPLE 1
#else
#define GLAD_PLATFORM_APPLE 0
#endif
#endif

#ifndef GLAD_PLATFORM_EMSCRIPTEN
#ifdef __EMSCRIPTEN__
#define GLAD_PLATFORM_EMSCRIPTEN 1
#else
#define GLAD_PLATFORM_EMSCRIPTEN 0
#endif
#endif

#ifndef GLAD_PLATFORM_UWP
#if defined(_MSC_VER) && !defined(GLAD_INTERNAL_HAVE_WINAPIFAMILY)
#ifdef __has_include
#if __has_include(<winapifamily.h>)
#define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
#endif
#elif _MSC_VER >= 1700 && !_USING_V110_SDK71_
#define GLAD_INTERNAL_HAVE_WINAPIFAMILY 1
#endif
#endif

#ifdef GLAD_INTERNAL_HAVE_WINAPIFAMILY
#include <winapifamily.h>
#if !WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_DESKTOP) && \
    WINAPI_FAMILY_PARTITION(WINAPI_PARTITION_APP)
#define GLAD_PLATFORM_UWP 1
#endif
#endif

#ifndef GLAD_PLATFORM_UWP
#define GLAD_PLATFORM_UWP 0
#endif
#endif

#ifdef __GNUC__
#define GLAD_GNUC_EXTENSION __extension__
#else
#define GLAD_GNUC_EXTENSION
#endif

#ifndef GLAD_API_CALL
#if defined(GLAD_API_CALL_EXPORT)
#if GLAD_PLATFORM_WIN32 || defined(__CYGWIN__)
#if defined(GLAD_API_CALL_EXPORT_BUILD)
#if defined(__GNUC__)
#define GLAD_API_CALL __attribute__((dllexport)) extern
#else
#define GLAD_API_CALL __declspec(dllexport) extern
#endif
#else
#if defined(__GNUC__)
#define GLAD_API_CALL __attribute__((dllimport)) extern
#else
#define GLAD_API_CALL __declspec(dllimport) extern
#endif
#endif
#elif defined(__GNUC__) && defined(GLAD_API_CALL_EXPORT_BUILD)
#define GLAD_API_CALL __attribute__((visibility("default"))) extern
#else
#define GLAD_API_CALL extern
#endif
#else
#define GLAD_API_CALL extern
#endif
#endif

#ifdef APIENTRY
#define GLAD_API_PTR APIENTRY
#elif GLAD_PLATFORM_WIN32
#define GLAD_API_PTR __stdcall
#else
#define GLAD_API_PTR
#endif

#ifndef GLAPI
#define GLAPI GLAD_API_CALL
#endif

#ifndef GLAPIENTRY
#define GLAPIENTRY GLAD_API_PTR
#endif

#define GLAD_MAKE_VERSION(major, minor) (major * 10000 + minor)
#define GLAD_VERSION_MAJOR(version) (version / 10000)
#define GLAD_VERSION_MINOR(version) (version % 10000)

#define GLAD_GENERATOR_VERSION "2.0.0-beta"

typedef void (*GLADapiproc)(void);

typedef GLADapiproc (*GLADloadfunc)(const char *name);
typedef GLADapiproc (*GLADuserptrloadfunc)(void *userptr, const char *name);

typedef void (*GLADprecallback)(const char *name, GLADapiproc apiproc,
                                int len_args, ...);
typedef void (*GLADpostcallback)(void *ret, const char *name,
                                 GLADapiproc apiproc, int len_args, ...);

#endif /* GLAD_PLATFORM_H_ */

#define GL_ACTIVE_TEXTURE 0x84E0
#define GL_ADD 0x0104
#define GL_ADD_SIGNED 0x8574
#define GL_ALIASED_LINE_WIDTH_RANGE 0x846E
#define GL_ALIASED_POINT_SIZE_RANGE 0x846D
#define GL_ALPHA 0x1906
#define GL_ALPHA_BITS 0x0D55
#define GL_ALPHA_SCALE 0x0D1C
#define GL_ALPHA_TEST 0x0BC0
#define GL_ALPHA_TEST_FUNC 0x0BC1
#define GL_ALPHA_TEST_REF 0x0BC2
#define GL_ALWAYS 0x0207
#define GL_AMBIENT 0x1200
#define GL_AMBIENT_AND_DIFFUSE 0x1602
#define GL_AND 0x1501
#define GL_AND_INVERTED 0x1504
#define GL_AND_REVERSE 0x1502
#define GL_ARRAY_BUFFER 0x8892
#define GL_ARRAY_BUFFER_BINDING 0x8894
#define GL_BACK 0x0405
#define GL_BLEND 0x0BE2
#define GL_BLEND_DST 0x0BE0
#define GL_BLEND_SRC 0x0BE1
#define GL_BLUE_BITS 0x0D54
#define GL_BUFFER_SIZE 0x8764
#define GL_BUFFER_USAGE 0x8765
#define GL_BYTE 0x1400
#define GL_CCW 0x0901
#define GL_CLAMP_TO_EDGE 0x812F
#define GL_CLEAR 0x1500
#define GL_CLIENT_ACTIVE_TEXTURE 0x84E1
#define GL_CLIP_PLANE0 0x3000
#define GL_CLIP_PLANE1 0x3001
#define GL_CLIP_PLANE2 0x3002
#define GL_CLIP_PLANE3 0x3003
#define GL_CLIP_PLANE4 0x3004
#define GL_CLIP_PLANE5 0x3005
#define GL_COLOR_ARRAY 0x8076
#define GL_COLOR_ARRAY_BUFFER_BINDING 0x8898
#define GL_COLOR_ARRAY_POINTER 0x8090
#define GL_COLOR_ARRAY_SIZE 0x8081
#define GL_COLOR_ARRAY_STRIDE 0x8083
#define GL_COLOR_ARRAY_TYPE 0x8082
#define GL_COLOR_BUFFER_BIT 0x00004000
#define GL_COLOR_CLEAR_VALUE 0x0C22
#define GL_COLOR_LOGIC_OP 0x0BF2
#define GL_COLOR_MATERIAL 0x0B57
#define GL_COLOR_WRITEMASK 0x0C23
#define GL_COMBINE 0x8570
#define GL_COMBINE_ALPHA 0x8572
#define GL_COMBINE_RGB 0x8571
#define GL_COMPRESSED_TEXTURE_FORMATS 0x86A3
#define GL_CONSTANT 0x8576
#define GL_CONSTANT_ATTENUATION 0x1207
#define GL_COPY 0x1503
#define GL_COPY_INVERTED 0x150C
#define GL_CULL_FACE 0x0B44
#define GL_CULL_FACE_MODE 0x0B45
#define GL_CURRENT_COLOR 0x0B00
#define GL_CURRENT_NORMAL 0x0B02
#define GL_CURRENT_TEXTURE_COORDS 0x0B03
#define GL_CW 0x0900
#define GL_DECAL 0x2101
#define GL_DECR 0x1E03
#define GL_DEPTH_BITS 0x0D56
#define GL_DEPTH_BUFFER_BIT 0x00000100
#define GL_DEPTH_CLEAR_VALUE 0x0B73
#define GL_DEPTH_FUNC 0x0B74
#define GL_DEPTH_RANGE 0x0B70
#define GL_DEPTH_TEST 0x0B71
#define GL_DEPTH_WRITEMASK 0x0B72
#define GL_DIFFUSE 0x1201
#define GL_DITHER 0x0BD0
#define GL_DONT_CARE 0x1100
#define GL_DOT3_RGB 0x86AE
#define GL_DOT3_RGBA 0x86AF
#define GL_DST_ALPHA 0x0304
#define GL_DST_COLOR 0x0306
#define GL_DYNAMIC_DRAW 0x88E8
#define GL_ELEMENT_ARRAY_BUFFER 0x8893
#define GL_ELEMENT_ARRAY_BUFFER_BINDING 0x8895
#define GL_EMISSION 0x1600
#define GL_EQUAL 0x0202
#define GL_EQUIV 0x1509
#define GL_EXP 0x0800
#define GL_EXP2 0x0801
#define GL_EXTENSIONS 0x1F03
#define GL_FALSE 0
#define GL_FASTEST 0x1101
#define GL_FIXED 0x140C
#define GL_FLAT 0x1D00
#define GL_FLOAT 0x1406
#define GL_FOG 0x0B60
#define GL_FOG_COLOR 0x0B66
#define GL_FOG_DENSITY 0x0B62
#define GL_FOG_END 0x0B64
#define GL_FOG_HINT 0x0C54
#define GL_FOG_MODE 0x0B65
#define GL_FOG_START 0x0B63
#define GL_FRONT 0x0404
#define GL_FRONT_AND_BACK 0x0408
#define GL_FRONT_FACE 0x0B46
#define GL_GENERATE_MIPMAP 0x8191
#define GL_GENERATE_MIPMAP_HINT 0x8192
#define GL_GEQUAL 0x0206
#define GL_GREATER 0x0204
#define GL_GREEN_BITS 0x0D53
#define GL_INCR 0x1E02
#define GL_INTERPOLATE 0x8575
#define GL_INVALID_ENUM 0x0500
#define GL_INVALID_OPERATION 0x0502
#define GL_INVALID_VALUE 0x0501
#define GL_INVERT 0x150A
#define GL_KEEP 0x1E00
#define GL_LEQUAL 0x0203
#define GL_LESS 0x0201
#define GL_LIGHT0 0x4000
#define GL_LIGHT1 0x4001
#define GL_LIGHT2 0x4002
#define GL_LIGHT3 0x4003
#define GL_LIGHT4 0x4004
#define GL_LIGHT5 0x4005
#define GL_LIGHT6 0x4006
#define GL_LIGHT7 0x4007
#define GL_LIGHTING 0x0B50
#define GL_LIGHT_MODEL_AMBIENT 0x0B53
#define GL_LIGHT_MODEL_TWO_SIDE 0x0B52
#define GL_LINEAR 0x2601
#define GL_LINEAR_ATTENUATION 0x1208
#define GL_LINEAR_MIPMAP_LINEAR 0x2703
#define GL_LINEAR_MIPMAP_NEAREST 0x2701
#define GL_LINES 0x0001
#define GL_LINE_LOOP 0x0002
#define GL_LINE_SMOOTH 0x0B20
#define GL_LINE_SMOOTH_HINT 0x0C52
#define GL_LINE_STRIP 0x0003
#define GL_LINE_WIDTH 0x0B21
#define GL_LINE_WIDTH_RANGE 0x0B22
#define GL_LOGIC_OP_MODE 0x0BF0
#define GL_LUMINANCE 0x1909
#define GL_LUMINANCE_ALPHA 0x190A
#define GL_MATRIX_MODE 0x0BA0
#define GL_MAX_CLIP_PLANES 0x0D32
#define GL_MAX_LIGHTS 0x0D31
#define GL_MAX_MODELVIEW_STACK_DEPTH 0x0D36
#define GL_MAX_PROJECTION_STACK_DEPTH 0x0D38
#define GL_MAX_TEXTURE_SIZE 0x0D33
#define GL_MAX_TEXTURE_STACK_DEPTH 0x0D39
#define GL_MAX_TEXTURE_UNITS 0x84E2
#define GL_MAX_VIEWPORT_DIMS 0x0D3A
#define GL_MODELVIEW 0x1700
#define GL_MODELVIEW_MATRIX 0x0BA6
#define GL_MODELVIEW_STACK_DEPTH 0x0BA3
#define GL_MODULATE 0x2100
#define GL_MULTISAMPLE 0x809D
#define GL_NAND 0x150E
#define GL_NEAREST 0x2600
#define GL_NEAREST_MIPMAP_LINEAR 0x2702
#define GL_NEAREST_MIPMAP_NEAREST 0x2700
#define GL_NEVER 0x0200
#define GL_NICEST 0x1102
#define GL_NOOP 0x1505
#define GL_NOR 0x1508
#define GL_NORMALIZE 0x0BA1
#define GL_NORMAL_ARRAY 0x8075
#define GL_NORMAL_ARRAY_BUFFER_BINDING 0x8897
#define GL_NORMAL_ARRAY_POINTER 0x808F
#define GL_NORMAL_ARRAY_STRIDE 0x807F
#define GL_NORMAL_ARRAY_TYPE 0x807E
#define GL_NOTEQUAL 0x0205
#define GL_NO_ERROR 0
#define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0x86A2
#define GL_ONE 1
#define GL_ONE_MINUS_DST_ALPHA 0x0305
#define GL_ONE_MINUS_DST_COLOR 0x0307
#define GL_ONE_MINUS_SRC_ALPHA 0x0303
#define GL_ONE_MINUS_SRC_COLOR 0x0301
#define GL_OPERAND0_ALPHA 0x8598
#define GL_OPERAND0_RGB 0x8590
#define GL_OPERAND1_ALPHA 0x8599
#define GL_OPERAND1_RGB 0x8591
#define GL_OPERAND2_ALPHA 0x859A
#define GL_OPERAND2_RGB 0x8592
#define GL_OR 0x1507
#define GL_OR_INVERTED 0x150D
#define GL_OR_REVERSE 0x150B
#define GL_OUT_OF_MEMORY 0x0505
#define GL_PACK_ALIGNMENT 0x0D05
#define GL_PERSPECTIVE_CORRECTION_HINT 0x0C50
#define GL_POINTS 0x0000
#define GL_POINT_DISTANCE_ATTENUATION 0x8129
#define GL_POINT_FADE_THRESHOLD_SIZE 0x8128
#define GL_POINT_SIZE 0x0B11
#define GL_POINT_SIZE_MAX 0x8127
#define GL_POINT_SIZE_MIN 0x8126
#define GL_POINT_SIZE_RANGE 0x0B12
#define GL_POINT_SMOOTH 0x0B10
#define GL_POINT_SMOOTH_HINT 0x0C51
#define GL_POLYGON_OFFSET_FACTOR 0x8038
#define GL_POLYGON_OFFSET_FILL 0x8037
#define GL_POLYGON_OFFSET_UNITS 0x2A00
#define GL_POSITION 0x1203
#define GL_PREVIOUS 0x8578
#define GL_PRIMARY_COLOR 0x8577
#define GL_PROJECTION 0x1701
#define GL_PROJECTION_MATRIX 0x0BA7
#define GL_PROJECTION_STACK_DEPTH 0x0BA4
#define GL_QUADRATIC_ATTENUATION 0x1209
#define GL_RED_BITS 0x0D52
#define GL_RENDERER 0x1F01
#define GL_REPEAT 0x2901
#define GL_REPLACE 0x1E01
#define GL_RESCALE_NORMAL 0x803A
#define GL_RGB 0x1907
#define GL_RGBA 0x1908
#define GL_RGB_SCALE 0x8573
#define GL_SAMPLES 0x80A9
#define GL_SAMPLE_ALPHA_TO_COVERAGE 0x809E
#define GL_SAMPLE_ALPHA_TO_ONE 0x809F
#define GL_SAMPLE_BUFFERS 0x80A8
#define GL_SAMPLE_COVERAGE 0x80A0
#define GL_SAMPLE_COVERAGE_INVERT 0x80AB
#define GL_SAMPLE_COVERAGE_VALUE 0x80AA
#define GL_SCISSOR_BOX 0x0C10
#define GL_SCISSOR_TEST 0x0C11
#define GL_SET 0x150F
#define GL_SHADE_MODEL 0x0B54
#define GL_SHININESS 0x1601
#define GL_SHORT 0x1402
#define GL_SMOOTH 0x1D01
#define GL_SMOOTH_LINE_WIDTH_RANGE 0x0B22
#define GL_SMOOTH_POINT_SIZE_RANGE 0x0B12
#define GL_SOURCE0_ALPHA 0x8588
#define GL_SOURCE0_RGB 0x8580
#define GL_SOURCE1_ALPHA 0x8589
#define GL_SOURCE1_RGB 0x8581
#define GL_SOURCE2_ALPHA 0x858A
#define GL_SOURCE2_RGB 0x8582
#define GL_SPECULAR 0x1202
#define GL_SPOT_CUTOFF 0x1206
#define GL_SPOT_DIRECTION 0x1204
#define GL_SPOT_EXPONENT 0x1205
#define GL_SRC0_ALPHA 0x8588
#define GL_SRC0_RGB 0x8580
#define GL_SRC1_ALPHA 0x8589
#define GL_SRC1_RGB 0x8581
#define GL_SRC2_ALPHA 0x858A
#define GL_SRC2_RGB 0x8582
#define GL_SRC_ALPHA 0x0302
#define GL_SRC_ALPHA_SATURATE 0x0308
#define GL_SRC_COLOR 0x0300
#define GL_STACK_OVERFLOW 0x0503
#define GL_STACK_UNDERFLOW 0x0504
#define GL_STATIC_DRAW 0x88E4
#define GL_STENCIL_BITS 0x0D57
#define GL_STENCIL_BUFFER_BIT 0x00000400
#define GL_STENCIL_CLEAR_VALUE 0x0B91
#define GL_STENCIL_FAIL 0x0B94
#define GL_STENCIL_FUNC 0x0B92
#define GL_STENCIL_PASS_DEPTH_FAIL 0x0B95
#define GL_STENCIL_PASS_DEPTH_PASS 0x0B96
#define GL_STENCIL_REF 0x0B97
#define GL_STENCIL_TEST 0x0B90
#define GL_STENCIL_VALUE_MASK 0x0B93
#define GL_STENCIL_WRITEMASK 0x0B98
#define GL_SUBPIXEL_BITS 0x0D50
#define GL_SUBTRACT 0x84E7
#define GL_TEXTURE 0x1702
#define GL_TEXTURE0 0x84C0
#define GL_TEXTURE1 0x84C1
#define GL_TEXTURE10 0x84CA
#define GL_TEXTURE11 0x84CB
#define GL_TEXTURE12 0x84CC
#define GL_TEXTURE13 0x84CD
#define GL_TEXTURE14 0x84CE
#define GL_TEXTURE15 0x84CF
#define GL_TEXTURE16 0x84D0
#define GL_TEXTURE17 0x84D1
#define GL_TEXTURE18 0x84D2
#define GL_TEXTURE19 0x84D3
#define GL_TEXTURE2 0x84C2
#define GL_TEXTURE20 0x84D4
#define GL_TEXTURE21 0x84D5
#define GL_TEXTURE22 0x84D6
#define GL_TEXTURE23 0x84D7
#define GL_TEXTURE24 0x84D8
#define GL_TEXTURE25 0x84D9
#define GL_TEXTURE26 0x84DA
#define GL_TEXTURE27 0x84DB
#define GL_TEXTURE28 0x84DC
#define GL_TEXTURE29 0x84DD
#define GL_TEXTURE3 0x84C3
#define GL_TEXTURE30 0x84DE
#define GL_TEXTURE31 0x84DF
#define GL_TEXTURE4 0x84C4
#define GL_TEXTURE5 0x84C5
#define GL_TEXTURE6 0x84C6
#define GL_TEXTURE7 0x84C7
#define GL_TEXTURE8 0x84C8
#define GL_TEXTURE9 0x84C9
#define GL_TEXTURE_2D 0x0DE1
#define GL_TEXTURE_BINDING_2D 0x8069
#define GL_TEXTURE_COORD_ARRAY 0x8078
#define GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING 0x889A
#define GL_TEXTURE_COORD_ARRAY_POINTER 0x8092
#define GL_TEXTURE_COORD_ARRAY_SIZE 0x8088
#define GL_TEXTURE_COORD_ARRAY_STRIDE 0x808A
#define GL_TEXTURE_COORD_ARRAY_TYPE 0x8089
#define GL_TEXTURE_ENV 0x2300
#define GL_TEXTURE_ENV_COLOR 0x2201
#define GL_TEXTURE_ENV_MODE 0x2200
#define GL_TEXTURE_MAG_FILTER 0x2800
#define GL_TEXTURE_MATRIX 0x0BA8
#define GL_TEXTURE_MIN_FILTER 0x2801
#define GL_TEXTURE_STACK_DEPTH 0x0BA5
#define GL_TEXTURE_WRAP_S 0x2802
#define GL_TEXTURE_WRAP_T 0x2803
#define GL_TRIANGLES 0x0004
#define GL_TRIANGLE_FAN 0x0006
#define GL_TRIANGLE_STRIP 0x0005
#define GL_TRUE 1
#define GL_UNPACK_ALIGNMENT 0x0CF5
#define GL_UNSIGNED_BYTE 0x1401
#define GL_UNSIGNED_SHORT 0x1403
#define GL_UNSIGNED_SHORT_4_4_4_4 0x8033
#define GL_UNSIGNED_SHORT_5_5_5_1 0x8034
#define GL_UNSIGNED_SHORT_5_6_5 0x8363
#define GL_VENDOR 0x1F00
#define GL_VERSION 0x1F02
#define GL_VERSION_ES_CL_1_0 1
#define GL_VERSION_ES_CL_1_1 1
#define GL_VERSION_ES_CM_1_1 1
#define GL_VERTEX_ARRAY 0x8074
#define GL_VERTEX_ARRAY_BUFFER_BINDING 0x8896
#define GL_VERTEX_ARRAY_POINTER 0x808E
#define GL_VERTEX_ARRAY_SIZE 0x807A
#define GL_VERTEX_ARRAY_STRIDE 0x807C
#define GL_VERTEX_ARRAY_TYPE 0x807B
#define GL_VIEWPORT 0x0BA2
#define GL_XOR 0x1506
#define GL_ZERO 0

#include <KHR/khrplatform.h>
typedef unsigned int GLenum;
typedef unsigned char GLboolean;
typedef unsigned int GLbitfield;
typedef void GLvoid;
typedef khronos_int8_t GLbyte;
typedef khronos_uint8_t GLubyte;
typedef khronos_int16_t GLshort;
typedef khronos_uint16_t GLushort;
typedef int GLint;
typedef unsigned int GLuint;
typedef khronos_int32_t GLclampx;
typedef int GLsizei;
typedef khronos_float_t GLfloat;
typedef khronos_float_t GLclampf;
typedef double GLdouble;
typedef double GLclampd;
typedef void *GLeglClientBufferEXT;
typedef void *GLeglImageOES;
typedef char GLchar;
typedef char GLcharARB;
#ifdef __APPLE__
typedef void *GLhandleARB;
#else
typedef unsigned int GLhandleARB;
#endif
typedef khronos_uint16_t GLhalf;
typedef khronos_uint16_t GLhalfARB;
typedef khronos_int32_t GLfixed;
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
    (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptr;
#else
typedef khronos_intptr_t GLintptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
    (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_intptr_t GLintptrARB;
#else
typedef khronos_intptr_t GLintptrARB;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
    (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptr;
#else
typedef khronos_ssize_t GLsizeiptr;
#endif
#if defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && \
    (__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ > 1060)
typedef khronos_ssize_t GLsizeiptrARB;
#else
typedef khronos_ssize_t GLsizeiptrARB;
#endif
typedef khronos_int64_t GLint64;
typedef khronos_int64_t GLint64EXT;
typedef khronos_uint64_t GLuint64;
typedef khronos_uint64_t GLuint64EXT;
typedef struct __GLsync *GLsync;
struct _cl_context;
struct _cl_event;
typedef void(GLAD_API_PTR *GLDEBUGPROC)(GLenum source, GLenum type, GLuint id,
                                        GLenum severity, GLsizei length,
                                        const GLchar *message,
                                        const void *userParam);
typedef void(GLAD_API_PTR *GLDEBUGPROCARB)(GLenum source, GLenum type,
                                           GLuint id, GLenum severity,
                                           GLsizei length,
                                           const GLchar *message,
                                           const void *userParam);
typedef void(GLAD_API_PTR *GLDEBUGPROCKHR)(GLenum source, GLenum type,
                                           GLuint id, GLenum severity,
                                           GLsizei length,
                                           const GLchar *message,
                                           const void *userParam);
typedef void(GLAD_API_PTR *GLDEBUGPROCAMD)(GLuint id, GLenum category,
                                           GLenum severity, GLsizei length,
                                           const GLchar *message,
                                           void *userParam);
typedef unsigned short GLhalfNV;
typedef GLintptr GLvdpauSurfaceNV;
typedef void(GLAD_API_PTR *GLVULKANPROCNV)(void);

#define GL_VERSION_ES_CM_1_0 1

typedef void(GLAD_API_PTR *PFNGLACTIVETEXTUREPROC)(GLenum texture);
typedef void(GLAD_API_PTR *PFNGLALPHAFUNCPROC)(GLenum func, GLfloat ref);
typedef void(GLAD_API_PTR *PFNGLALPHAFUNCXPROC)(GLenum func, GLfixed ref);
typedef void(GLAD_API_PTR *PFNGLBINDBUFFERPROC)(GLenum target, GLuint buffer);
typedef void(GLAD_API_PTR *PFNGLBINDTEXTUREPROC)(GLenum target, GLuint texture);
typedef void(GLAD_API_PTR *PFNGLBLENDFUNCPROC)(GLenum sfactor, GLenum dfactor);
typedef void(GLAD_API_PTR *PFNGLBUFFERDATAPROC)(GLenum target, GLsizeiptr size,
                                                const void *data, GLenum usage);
typedef void(GLAD_API_PTR *PFNGLBUFFERSUBDATAPROC)(GLenum target,
                                                   GLintptr offset,
                                                   GLsizeiptr size,
                                                   const void *data);
typedef void(GLAD_API_PTR *PFNGLCLEARPROC)(GLbitfield mask);
typedef void(GLAD_API_PTR *PFNGLCLEARCOLORPROC)(GLfloat red, GLfloat green,
                                                GLfloat blue, GLfloat alpha);
typedef void(GLAD_API_PTR *PFNGLCLEARCOLORXPROC)(GLfixed red, GLfixed green,
                                                 GLfixed blue, GLfixed alpha);
typedef void(GLAD_API_PTR *PFNGLCLEARDEPTHFPROC)(GLfloat d);
typedef void(GLAD_API_PTR *PFNGLCLEARDEPTHXPROC)(GLfixed depth);
typedef void(GLAD_API_PTR *PFNGLCLEARSTENCILPROC)(GLint s);
typedef void(GLAD_API_PTR *PFNGLCLIENTACTIVETEXTUREPROC)(GLenum texture);
typedef void(GLAD_API_PTR *PFNGLCLIPPLANEFPROC)(GLenum p, const GLfloat *eqn);
typedef void(GLAD_API_PTR *PFNGLCLIPPLANEXPROC)(GLenum plane,
                                                const GLfixed *equation);
typedef void(GLAD_API_PTR *PFNGLCOLOR4FPROC)(GLfloat red, GLfloat green,
                                             GLfloat blue, GLfloat alpha);
typedef void(GLAD_API_PTR *PFNGLCOLOR4UBPROC)(GLubyte red, GLubyte green,
                                              GLubyte blue, GLubyte alpha);
typedef void(GLAD_API_PTR *PFNGLCOLOR4XPROC)(GLfixed red, GLfixed green,
                                             GLfixed blue, GLfixed alpha);
typedef void(GLAD_API_PTR *PFNGLCOLORMASKPROC)(GLboolean red, GLboolean green,
                                               GLboolean blue, GLboolean alpha);
typedef void(GLAD_API_PTR *PFNGLCOLORPOINTERPROC)(GLint size, GLenum type,
                                                  GLsizei stride,
                                                  const void *pointer);
typedef void(GLAD_API_PTR *PFNGLCOMPRESSEDTEXIMAGE2DPROC)(
    GLenum target, GLint level, GLenum internalformat, GLsizei width,
    GLsizei height, GLint border, GLsizei imageSize, const void *data);
typedef void(GLAD_API_PTR *PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)(
    GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,
    GLsizei height, GLenum format, GLsizei imageSize, const void *data);
typedef void(GLAD_API_PTR *PFNGLCOPYTEXIMAGE2DPROC)(
    GLenum target, GLint level, GLenum internalformat, GLint x, GLint y,
    GLsizei width, GLsizei height, GLint border);
typedef void(GLAD_API_PTR *PFNGLCOPYTEXSUBIMAGE2DPROC)(
    GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y,
    GLsizei width, GLsizei height);
typedef void(GLAD_API_PTR *PFNGLCULLFACEPROC)(GLenum mode);
typedef void(GLAD_API_PTR *PFNGLDELETEBUFFERSPROC)(GLsizei n,
                                                   const GLuint *buffers);
typedef void(GLAD_API_PTR *PFNGLDELETETEXTURESPROC)(GLsizei n,
                                                    const GLuint *textures);
typedef void(GLAD_API_PTR *PFNGLDEPTHFUNCPROC)(GLenum func);
typedef void(GLAD_API_PTR *PFNGLDEPTHMASKPROC)(GLboolean flag);
typedef void(GLAD_API_PTR *PFNGLDEPTHRANGEFPROC)(GLfloat n, GLfloat f);
typedef void(GLAD_API_PTR *PFNGLDEPTHRANGEXPROC)(GLfixed n, GLfixed f);
typedef void(GLAD_API_PTR *PFNGLDISABLEPROC)(GLenum cap);
typedef void(GLAD_API_PTR *PFNGLDISABLECLIENTSTATEPROC)(GLenum array);
typedef void(GLAD_API_PTR *PFNGLDRAWARRAYSPROC)(GLenum mode, GLint first,
                                                GLsizei count);
typedef void(GLAD_API_PTR *PFNGLDRAWELEMENTSPROC)(GLenum mode, GLsizei count,
                                                  GLenum type,
                                                  const void *indices);
typedef void(GLAD_API_PTR *PFNGLENABLEPROC)(GLenum cap);
typedef void(GLAD_API_PTR *PFNGLENABLECLIENTSTATEPROC)(GLenum array);
typedef void(GLAD_API_PTR *PFNGLFINISHPROC)(void);
typedef void(GLAD_API_PTR *PFNGLFLUSHPROC)(void);
typedef void(GLAD_API_PTR *PFNGLFOGFPROC)(GLenum pname, GLfloat param);
typedef void(GLAD_API_PTR *PFNGLFOGFVPROC)(GLenum pname, const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLFOGXPROC)(GLenum pname, GLfixed param);
typedef void(GLAD_API_PTR *PFNGLFOGXVPROC)(GLenum pname, const GLfixed *param);
typedef void(GLAD_API_PTR *PFNGLFRONTFACEPROC)(GLenum mode);
typedef void(GLAD_API_PTR *PFNGLFRUSTUMFPROC)(GLfloat l, GLfloat r, GLfloat b,
                                              GLfloat t, GLfloat n, GLfloat f);
typedef void(GLAD_API_PTR *PFNGLFRUSTUMXPROC)(GLfixed l, GLfixed r, GLfixed b,
                                              GLfixed t, GLfixed n, GLfixed f);
typedef void(GLAD_API_PTR *PFNGLGENBUFFERSPROC)(GLsizei n, GLuint *buffers);
typedef void(GLAD_API_PTR *PFNGLGENTEXTURESPROC)(GLsizei n, GLuint *textures);
typedef void(GLAD_API_PTR *PFNGLGETBOOLEANVPROC)(GLenum pname, GLboolean *data);
typedef void(GLAD_API_PTR *PFNGLGETBUFFERPARAMETERIVPROC)(GLenum target,
                                                          GLenum pname,
                                                          GLint *params);
typedef void(GLAD_API_PTR *PFNGLGETCLIPPLANEFPROC)(GLenum plane,
                                                   GLfloat *equation);
typedef void(GLAD_API_PTR *PFNGLGETCLIPPLANEXPROC)(GLenum plane,
                                                   GLfixed *equation);
typedef GLenum(GLAD_API_PTR *PFNGLGETERRORPROC)(void);
typedef void(GLAD_API_PTR *PFNGLGETFIXEDVPROC)(GLenum pname, GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLGETFLOATVPROC)(GLenum pname, GLfloat *data);
typedef void(GLAD_API_PTR *PFNGLGETINTEGERVPROC)(GLenum pname, GLint *data);
typedef void(GLAD_API_PTR *PFNGLGETLIGHTFVPROC)(GLenum light, GLenum pname,
                                                GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLGETLIGHTXVPROC)(GLenum light, GLenum pname,
                                                GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLGETMATERIALFVPROC)(GLenum face, GLenum pname,
                                                   GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLGETMATERIALXVPROC)(GLenum face, GLenum pname,
                                                   GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLGETPOINTERVPROC)(GLenum pname, void **params);
typedef const GLubyte *(GLAD_API_PTR *PFNGLGETSTRINGPROC)(GLenum name);
typedef void(GLAD_API_PTR *PFNGLGETTEXENVFVPROC)(GLenum target, GLenum pname,
                                                 GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLGETTEXENVIVPROC)(GLenum target, GLenum pname,
                                                 GLint *params);
typedef void(GLAD_API_PTR *PFNGLGETTEXENVXVPROC)(GLenum target, GLenum pname,
                                                 GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLGETTEXPARAMETERFVPROC)(GLenum target,
                                                       GLenum pname,
                                                       GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLGETTEXPARAMETERIVPROC)(GLenum target,
                                                       GLenum pname,
                                                       GLint *params);
typedef void(GLAD_API_PTR *PFNGLGETTEXPARAMETERXVPROC)(GLenum target,
                                                       GLenum pname,
                                                       GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLHINTPROC)(GLenum target, GLenum mode);
typedef GLboolean(GLAD_API_PTR *PFNGLISBUFFERPROC)(GLuint buffer);
typedef GLboolean(GLAD_API_PTR *PFNGLISENABLEDPROC)(GLenum cap);
typedef GLboolean(GLAD_API_PTR *PFNGLISTEXTUREPROC)(GLuint texture);
typedef void(GLAD_API_PTR *PFNGLLIGHTMODELFPROC)(GLenum pname, GLfloat param);
typedef void(GLAD_API_PTR *PFNGLLIGHTMODELFVPROC)(GLenum pname,
                                                  const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLLIGHTMODELXPROC)(GLenum pname, GLfixed param);
typedef void(GLAD_API_PTR *PFNGLLIGHTMODELXVPROC)(GLenum pname,
                                                  const GLfixed *param);
typedef void(GLAD_API_PTR *PFNGLLIGHTFPROC)(GLenum light, GLenum pname,
                                            GLfloat param);
typedef void(GLAD_API_PTR *PFNGLLIGHTFVPROC)(GLenum light, GLenum pname,
                                             const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLLIGHTXPROC)(GLenum light, GLenum pname,
                                            GLfixed param);
typedef void(GLAD_API_PTR *PFNGLLIGHTXVPROC)(GLenum light, GLenum pname,
                                             const GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLLINEWIDTHPROC)(GLfloat width);
typedef void(GLAD_API_PTR *PFNGLLINEWIDTHXPROC)(GLfixed width);
typedef void(GLAD_API_PTR *PFNGLLOADIDENTITYPROC)(void);
typedef void(GLAD_API_PTR *PFNGLLOADMATRIXFPROC)(const GLfloat *m);
typedef void(GLAD_API_PTR *PFNGLLOADMATRIXXPROC)(const GLfixed *m);
typedef void(GLAD_API_PTR *PFNGLLOGICOPPROC)(GLenum opcode);
typedef void(GLAD_API_PTR *PFNGLMATERIALFPROC)(GLenum face, GLenum pname,
                                               GLfloat param);
typedef void(GLAD_API_PTR *PFNGLMATERIALFVPROC)(GLenum face, GLenum pname,
                                                const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLMATERIALXPROC)(GLenum face, GLenum pname,
                                               GLfixed param);
typedef void(GLAD_API_PTR *PFNGLMATERIALXVPROC)(GLenum face, GLenum pname,
                                                const GLfixed *param);
typedef void(GLAD_API_PTR *PFNGLMATRIXMODEPROC)(GLenum mode);
typedef void(GLAD_API_PTR *PFNGLMULTMATRIXFPROC)(const GLfloat *m);
typedef void(GLAD_API_PTR *PFNGLMULTMATRIXXPROC)(const GLfixed *m);
typedef void(GLAD_API_PTR *PFNGLMULTITEXCOORD4FPROC)(GLenum target, GLfloat s,
                                                     GLfloat t, GLfloat r,
                                                     GLfloat q);
typedef void(GLAD_API_PTR *PFNGLMULTITEXCOORD4XPROC)(GLenum texture, GLfixed s,
                                                     GLfixed t, GLfixed r,
                                                     GLfixed q);
typedef void(GLAD_API_PTR *PFNGLNORMAL3FPROC)(GLfloat nx, GLfloat ny,
                                              GLfloat nz);
typedef void(GLAD_API_PTR *PFNGLNORMAL3XPROC)(GLfixed nx, GLfixed ny,
                                              GLfixed nz);
typedef void(GLAD_API_PTR *PFNGLNORMALPOINTERPROC)(GLenum type, GLsizei stride,
                                                   const void *pointer);
typedef void(GLAD_API_PTR *PFNGLORTHOFPROC)(GLfloat l, GLfloat r, GLfloat b,
                                            GLfloat t, GLfloat n, GLfloat f);
typedef void(GLAD_API_PTR *PFNGLORTHOXPROC)(GLfixed l, GLfixed r, GLfixed b,
                                            GLfixed t, GLfixed n, GLfixed f);
typedef void(GLAD_API_PTR *PFNGLPIXELSTOREIPROC)(GLenum pname, GLint param);
typedef void(GLAD_API_PTR *PFNGLPOINTPARAMETERFPROC)(GLenum pname,
                                                     GLfloat param);
typedef void(GLAD_API_PTR *PFNGLPOINTPARAMETERFVPROC)(GLenum pname,
                                                      const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLPOINTPARAMETERXPROC)(GLenum pname,
                                                     GLfixed param);
typedef void(GLAD_API_PTR *PFNGLPOINTPARAMETERXVPROC)(GLenum pname,
                                                      const GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLPOINTSIZEPROC)(GLfloat size);
typedef void(GLAD_API_PTR *PFNGLPOINTSIZEXPROC)(GLfixed size);
typedef void(GLAD_API_PTR *PFNGLPOLYGONOFFSETPROC)(GLfloat factor,
                                                   GLfloat units);
typedef void(GLAD_API_PTR *PFNGLPOLYGONOFFSETXPROC)(GLfixed factor,
                                                    GLfixed units);
typedef void(GLAD_API_PTR *PFNGLPOPMATRIXPROC)(void);
typedef void(GLAD_API_PTR *PFNGLPUSHMATRIXPROC)(void);
typedef void(GLAD_API_PTR *PFNGLREADPIXELSPROC)(GLint x, GLint y, GLsizei width,
                                                GLsizei height, GLenum format,
                                                GLenum type, void *pixels);
typedef void(GLAD_API_PTR *PFNGLROTATEFPROC)(GLfloat angle, GLfloat x,
                                             GLfloat y, GLfloat z);
typedef void(GLAD_API_PTR *PFNGLROTATEXPROC)(GLfixed angle, GLfixed x,
                                             GLfixed y, GLfixed z);
typedef void(GLAD_API_PTR *PFNGLSAMPLECOVERAGEPROC)(GLfloat value,
                                                    GLboolean invert);
typedef void(GLAD_API_PTR *PFNGLSAMPLECOVERAGEXPROC)(GLclampx value,
                                                     GLboolean invert);
typedef void(GLAD_API_PTR *PFNGLSCALEFPROC)(GLfloat x, GLfloat y, GLfloat z);
typedef void(GLAD_API_PTR *PFNGLSCALEXPROC)(GLfixed x, GLfixed y, GLfixed z);
typedef void(GLAD_API_PTR *PFNGLSCISSORPROC)(GLint x, GLint y, GLsizei width,
                                             GLsizei height);
typedef void(GLAD_API_PTR *PFNGLSHADEMODELPROC)(GLenum mode);
typedef void(GLAD_API_PTR *PFNGLSTENCILFUNCPROC)(GLenum func, GLint ref,
                                                 GLuint mask);
typedef void(GLAD_API_PTR *PFNGLSTENCILMASKPROC)(GLuint mask);
typedef void(GLAD_API_PTR *PFNGLSTENCILOPPROC)(GLenum fail, GLenum zfail,
                                               GLenum zpass);
typedef void(GLAD_API_PTR *PFNGLTEXCOORDPOINTERPROC)(GLint size, GLenum type,
                                                     GLsizei stride,
                                                     const void *pointer);
typedef void(GLAD_API_PTR *PFNGLTEXENVFPROC)(GLenum target, GLenum pname,
                                             GLfloat param);
typedef void(GLAD_API_PTR *PFNGLTEXENVFVPROC)(GLenum target, GLenum pname,
                                              const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLTEXENVIPROC)(GLenum target, GLenum pname,
                                             GLint param);
typedef void(GLAD_API_PTR *PFNGLTEXENVIVPROC)(GLenum target, GLenum pname,
                                              const GLint *params);
typedef void(GLAD_API_PTR *PFNGLTEXENVXPROC)(GLenum target, GLenum pname,
                                             GLfixed param);
typedef void(GLAD_API_PTR *PFNGLTEXENVXVPROC)(GLenum target, GLenum pname,
                                              const GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLTEXIMAGE2DPROC)(GLenum target, GLint level,
                                                GLint internalformat,
                                                GLsizei width, GLsizei height,
                                                GLint border, GLenum format,
                                                GLenum type,
                                                const void *pixels);
typedef void(GLAD_API_PTR *PFNGLTEXPARAMETERFPROC)(GLenum target, GLenum pname,
                                                   GLfloat param);
typedef void(GLAD_API_PTR *PFNGLTEXPARAMETERFVPROC)(GLenum target, GLenum pname,
                                                    const GLfloat *params);
typedef void(GLAD_API_PTR *PFNGLTEXPARAMETERIPROC)(GLenum target, GLenum pname,
                                                   GLint param);
typedef void(GLAD_API_PTR *PFNGLTEXPARAMETERIVPROC)(GLenum target, GLenum pname,
                                                    const GLint *params);
typedef void(GLAD_API_PTR *PFNGLTEXPARAMETERXPROC)(GLenum target, GLenum pname,
                                                   GLfixed param);
typedef void(GLAD_API_PTR *PFNGLTEXPARAMETERXVPROC)(GLenum target, GLenum pname,
                                                    const GLfixed *params);
typedef void(GLAD_API_PTR *PFNGLTEXSUBIMAGE2DPROC)(
    GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width,
    GLsizei height, GLenum format, GLenum type, const void *pixels);
typedef void(GLAD_API_PTR *PFNGLTRANSLATEFPROC)(GLfloat x, GLfloat y,
                                                GLfloat z);
typedef void(GLAD_API_PTR *PFNGLTRANSLATEXPROC)(GLfixed x, GLfixed y,
                                                GLfixed z);
typedef void(GLAD_API_PTR *PFNGLVERTEXPOINTERPROC)(GLint size, GLenum type,
                                                   GLsizei stride,
                                                   const void *pointer);
typedef void(GLAD_API_PTR *PFNGLVIEWPORTPROC)(GLint x, GLint y, GLsizei width,
                                              GLsizei height);

typedef struct GladGLES1Context {
  void *userptr;

  int VERSION_ES_CM_1_0;

  PFNGLACTIVETEXTUREPROC ActiveTexture;
  PFNGLALPHAFUNCPROC AlphaFunc;
  PFNGLALPHAFUNCXPROC AlphaFuncx;
  PFNGLBINDBUFFERPROC BindBuffer;
  PFNGLBINDTEXTUREPROC BindTexture;
  PFNGLBLENDFUNCPROC BlendFunc;
  PFNGLBUFFERDATAPROC BufferData;
  PFNGLBUFFERSUBDATAPROC BufferSubData;
  PFNGLCLEARPROC Clear;
  PFNGLCLEARCOLORPROC ClearColor;
  PFNGLCLEARCOLORXPROC ClearColorx;
  PFNGLCLEARDEPTHFPROC ClearDepthf;
  PFNGLCLEARDEPTHXPROC ClearDepthx;
  PFNGLCLEARSTENCILPROC ClearStencil;
  PFNGLCLIENTACTIVETEXTUREPROC ClientActiveTexture;
  PFNGLCLIPPLANEFPROC ClipPlanef;
  PFNGLCLIPPLANEXPROC ClipPlanex;
  PFNGLCOLOR4FPROC Color4f;
  PFNGLCOLOR4UBPROC Color4ub;
  PFNGLCOLOR4XPROC Color4x;
  PFNGLCOLORMASKPROC ColorMask;
  PFNGLCOLORPOINTERPROC ColorPointer;
  PFNGLCOMPRESSEDTEXIMAGE2DPROC CompressedTexImage2D;
  PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC CompressedTexSubImage2D;
  PFNGLCOPYTEXIMAGE2DPROC CopyTexImage2D;
  PFNGLCOPYTEXSUBIMAGE2DPROC CopyTexSubImage2D;
  PFNGLCULLFACEPROC CullFace;
  PFNGLDELETEBUFFERSPROC DeleteBuffers;
  PFNGLDELETETEXTURESPROC DeleteTextures;
  PFNGLDEPTHFUNCPROC DepthFunc;
  PFNGLDEPTHMASKPROC DepthMask;
  PFNGLDEPTHRANGEFPROC DepthRangef;
  PFNGLDEPTHRANGEXPROC DepthRangex;
  PFNGLDISABLEPROC Disable;
  PFNGLDISABLECLIENTSTATEPROC DisableClientState;
  PFNGLDRAWARRAYSPROC DrawArrays;
  PFNGLDRAWELEMENTSPROC DrawElements;
  PFNGLENABLEPROC Enable;
  PFNGLENABLECLIENTSTATEPROC EnableClientState;
  PFNGLFINISHPROC Finish;
  PFNGLFLUSHPROC Flush;
  PFNGLFOGFPROC Fogf;
  PFNGLFOGFVPROC Fogfv;
  PFNGLFOGXPROC Fogx;
  PFNGLFOGXVPROC Fogxv;
  PFNGLFRONTFACEPROC FrontFace;
  PFNGLFRUSTUMFPROC Frustumf;
  PFNGLFRUSTUMXPROC Frustumx;
  PFNGLGENBUFFERSPROC GenBuffers;
  PFNGLGENTEXTURESPROC GenTextures;
  PFNGLGETBOOLEANVPROC GetBooleanv;
  PFNGLGETBUFFERPARAMETERIVPROC GetBufferParameteriv;
  PFNGLGETCLIPPLANEFPROC GetClipPlanef;
  PFNGLGETCLIPPLANEXPROC GetClipPlanex;
  PFNGLGETERRORPROC GetError;
  PFNGLGETFIXEDVPROC GetFixedv;
  PFNGLGETFLOATVPROC GetFloatv;
  PFNGLGETINTEGERVPROC GetIntegerv;
  PFNGLGETLIGHTFVPROC GetLightfv;
  PFNGLGETLIGHTXVPROC GetLightxv;
  PFNGLGETMATERIALFVPROC GetMaterialfv;
  PFNGLGETMATERIALXVPROC GetMaterialxv;
  PFNGLGETPOINTERVPROC GetPointerv;
  PFNGLGETSTRINGPROC GetString;
  PFNGLGETTEXENVFVPROC GetTexEnvfv;
  PFNGLGETTEXENVIVPROC GetTexEnviv;
  PFNGLGETTEXENVXVPROC GetTexEnvxv;
  PFNGLGETTEXPARAMETERFVPROC GetTexParameterfv;
  PFNGLGETTEXPARAMETERIVPROC GetTexParameteriv;
  PFNGLGETTEXPARAMETERXVPROC GetTexParameterxv;
  PFNGLHINTPROC Hint;
  PFNGLISBUFFERPROC IsBuffer;
  PFNGLISENABLEDPROC IsEnabled;
  PFNGLISTEXTUREPROC IsTexture;
  PFNGLLIGHTMODELFPROC LightModelf;
  PFNGLLIGHTMODELFVPROC LightModelfv;
  PFNGLLIGHTMODELXPROC LightModelx;
  PFNGLLIGHTMODELXVPROC LightModelxv;
  PFNGLLIGHTFPROC Lightf;
  PFNGLLIGHTFVPROC Lightfv;
  PFNGLLIGHTXPROC Lightx;
  PFNGLLIGHTXVPROC Lightxv;
  PFNGLLINEWIDTHPROC LineWidth;
  PFNGLLINEWIDTHXPROC LineWidthx;
  PFNGLLOADIDENTITYPROC LoadIdentity;
  PFNGLLOADMATRIXFPROC LoadMatrixf;
  PFNGLLOADMATRIXXPROC LoadMatrixx;
  PFNGLLOGICOPPROC LogicOp;
  PFNGLMATERIALFPROC Materialf;
  PFNGLMATERIALFVPROC Materialfv;
  PFNGLMATERIALXPROC Materialx;
  PFNGLMATERIALXVPROC Materialxv;
  PFNGLMATRIXMODEPROC MatrixMode;
  PFNGLMULTMATRIXFPROC MultMatrixf;
  PFNGLMULTMATRIXXPROC MultMatrixx;
  PFNGLMULTITEXCOORD4FPROC MultiTexCoord4f;
  PFNGLMULTITEXCOORD4XPROC MultiTexCoord4x;
  PFNGLNORMAL3FPROC Normal3f;
  PFNGLNORMAL3XPROC Normal3x;
  PFNGLNORMALPOINTERPROC NormalPointer;
  PFNGLORTHOFPROC Orthof;
  PFNGLORTHOXPROC Orthox;
  PFNGLPIXELSTOREIPROC PixelStorei;
  PFNGLPOINTPARAMETERFPROC PointParameterf;
  PFNGLPOINTPARAMETERFVPROC PointParameterfv;
  PFNGLPOINTPARAMETERXPROC PointParameterx;
  PFNGLPOINTPARAMETERXVPROC PointParameterxv;
  PFNGLPOINTSIZEPROC PointSize;
  PFNGLPOINTSIZEXPROC PointSizex;
  PFNGLPOLYGONOFFSETPROC PolygonOffset;
  PFNGLPOLYGONOFFSETXPROC PolygonOffsetx;
  PFNGLPOPMATRIXPROC PopMatrix;
  PFNGLPUSHMATRIXPROC PushMatrix;
  PFNGLREADPIXELSPROC ReadPixels;
  PFNGLROTATEFPROC Rotatef;
  PFNGLROTATEXPROC Rotatex;
  PFNGLSAMPLECOVERAGEPROC SampleCoverage;
  PFNGLSAMPLECOVERAGEXPROC SampleCoveragex;
  PFNGLSCALEFPROC Scalef;
  PFNGLSCALEXPROC Scalex;
  PFNGLSCISSORPROC Scissor;
  PFNGLSHADEMODELPROC ShadeModel;
  PFNGLSTENCILFUNCPROC StencilFunc;
  PFNGLSTENCILMASKPROC StencilMask;
  PFNGLSTENCILOPPROC StencilOp;
  PFNGLTEXCOORDPOINTERPROC TexCoordPointer;
  PFNGLTEXENVFPROC TexEnvf;
  PFNGLTEXENVFVPROC TexEnvfv;
  PFNGLTEXENVIPROC TexEnvi;
  PFNGLTEXENVIVPROC TexEnviv;
  PFNGLTEXENVXPROC TexEnvx;
  PFNGLTEXENVXVPROC TexEnvxv;
  PFNGLTEXIMAGE2DPROC TexImage2D;
  PFNGLTEXPARAMETERFPROC TexParameterf;
  PFNGLTEXPARAMETERFVPROC TexParameterfv;
  PFNGLTEXPARAMETERIPROC TexParameteri;
  PFNGLTEXPARAMETERIVPROC TexParameteriv;
  PFNGLTEXPARAMETERXPROC TexParameterx;
  PFNGLTEXPARAMETERXVPROC TexParameterxv;
  PFNGLTEXSUBIMAGE2DPROC TexSubImage2D;
  PFNGLTRANSLATEFPROC Translatef;
  PFNGLTRANSLATEXPROC Translatex;
  PFNGLVERTEXPOINTERPROC VertexPointer;
  PFNGLVIEWPORTPROC Viewport;
} GladGLES1Context;

GLAD_API_CALL GladGLES1Context glad_gles1_context;

#define GLAD_GL_VERSION_ES_CM_1_0 (glad_gles1_context.VERSION_ES_CM_1_0)

#define glActiveTexture (glad_gles1_context.ActiveTexture)
#define glAlphaFunc (glad_gles1_context.AlphaFunc)
#define glAlphaFuncx (glad_gles1_context.AlphaFuncx)
#define glBindBuffer (glad_gles1_context.BindBuffer)
#define glBindTexture (glad_gles1_context.BindTexture)
#define glBlendFunc (glad_gles1_context.BlendFunc)
#define glBufferData (glad_gles1_context.BufferData)
#define glBufferSubData (glad_gles1_context.BufferSubData)
#define glClear (glad_gles1_context.Clear)
#define glClearColor (glad_gles1_context.ClearColor)
#define glClearColorx (glad_gles1_context.ClearColorx)
#define glClearDepthf (glad_gles1_context.ClearDepthf)
#define glClearDepthx (glad_gles1_context.ClearDepthx)
#define glClearStencil (glad_gles1_context.ClearStencil)
#define glClientActiveTexture (glad_gles1_context.ClientActiveTexture)
#define glClipPlanef (glad_gles1_context.ClipPlanef)
#define glClipPlanex (glad_gles1_context.ClipPlanex)
#define glColor4f (glad_gles1_context.Color4f)
#define glColor4ub (glad_gles1_context.Color4ub)
#define glColor4x (glad_gles1_context.Color4x)
#define glColorMask (glad_gles1_context.ColorMask)
#define glColorPointer (glad_gles1_context.ColorPointer)
#define glCompressedTexImage2D (glad_gles1_context.CompressedTexImage2D)
#define glCompressedTexSubImage2D (glad_gles1_context.CompressedTexSubImage2D)
#define glCopyTexImage2D (glad_gles1_context.CopyTexImage2D)
#define glCopyTexSubImage2D (glad_gles1_context.CopyTexSubImage2D)
#define glCullFace (glad_gles1_context.CullFace)
#define glDeleteBuffers (glad_gles1_context.DeleteBuffers)
#define glDeleteTextures (glad_gles1_context.DeleteTextures)
#define glDepthFunc (glad_gles1_context.DepthFunc)
#define glDepthMask (glad_gles1_context.DepthMask)
#define glDepthRangef (glad_gles1_context.DepthRangef)
#define glDepthRangex (glad_gles1_context.DepthRangex)
#define glDisable (glad_gles1_context.Disable)
#define glDisableClientState (glad_gles1_context.DisableClientState)
#define glDrawArrays (glad_gles1_context.DrawArrays)
#define glDrawElements (glad_gles1_context.DrawElements)
#define glEnable (glad_gles1_context.Enable)
#define glEnableClientState (glad_gles1_context.EnableClientState)
#define glFinish (glad_gles1_context.Finish)
#define glFlush (glad_gles1_context.Flush)
#define glFogf (glad_gles1_context.Fogf)
#define glFogfv (glad_gles1_context.Fogfv)
#define glFogx (glad_gles1_context.Fogx)
#define glFogxv (glad_gles1_context.Fogxv)
#define glFrontFace (glad_gles1_context.FrontFace)
#define glFrustumf (glad_gles1_context.Frustumf)
#define glFrustumx (glad_gles1_context.Frustumx)
#define glGenBuffers (glad_gles1_context.GenBuffers)
#define glGenTextures (glad_gles1_context.GenTextures)
#define glGetBooleanv (glad_gles1_context.GetBooleanv)
#define glGetBufferParameteriv (glad_gles1_context.GetBufferParameteriv)
#define glGetClipPlanef (glad_gles1_context.GetClipPlanef)
#define glGetClipPlanex (glad_gles1_context.GetClipPlanex)
#define glGetError (glad_gles1_context.GetError)
#define glGetFixedv (glad_gles1_context.GetFixedv)
#define glGetFloatv (glad_gles1_context.GetFloatv)
#define glGetIntegerv (glad_gles1_context.GetIntegerv)
#define glGetLightfv (glad_gles1_context.GetLightfv)
#define glGetLightxv (glad_gles1_context.GetLightxv)
#define glGetMaterialfv (glad_gles1_context.GetMaterialfv)
#define glGetMaterialxv (glad_gles1_context.GetMaterialxv)
#define glGetPointerv (glad_gles1_context.GetPointerv)
#define glGetString (glad_gles1_context.GetString)
#define glGetTexEnvfv (glad_gles1_context.GetTexEnvfv)
#define glGetTexEnviv (glad_gles1_context.GetTexEnviv)
#define glGetTexEnvxv (glad_gles1_context.GetTexEnvxv)
#define glGetTexParameterfv (glad_gles1_context.GetTexParameterfv)
#define glGetTexParameteriv (glad_gles1_context.GetTexParameteriv)
#define glGetTexParameterxv (glad_gles1_context.GetTexParameterxv)
#define glHint (glad_gles1_context.Hint)
#define glIsBuffer (glad_gles1_context.IsBuffer)
#define glIsEnabled (glad_gles1_context.IsEnabled)
#define glIsTexture (glad_gles1_context.IsTexture)
#define glLightModelf (glad_gles1_context.LightModelf)
#define glLightModelfv (glad_gles1_context.LightModelfv)
#define glLightModelx (glad_gles1_context.LightModelx)
#define glLightModelxv (glad_gles1_context.LightModelxv)
#define glLightf (glad_gles1_context.Lightf)
#define glLightfv (glad_gles1_context.Lightfv)
#define glLightx (glad_gles1_context.Lightx)
#define glLightxv (glad_gles1_context.Lightxv)
#define glLineWidth (glad_gles1_context.LineWidth)
#define glLineWidthx (glad_gles1_context.LineWidthx)
#define glLoadIdentity (glad_gles1_context.LoadIdentity)
#define glLoadMatrixf (glad_gles1_context.LoadMatrixf)
#define glLoadMatrixx (glad_gles1_context.LoadMatrixx)
#define glLogicOp (glad_gles1_context.LogicOp)
#define glMaterialf (glad_gles1_context.Materialf)
#define glMaterialfv (glad_gles1_context.Materialfv)
#define glMaterialx (glad_gles1_context.Materialx)
#define glMaterialxv (glad_gles1_context.Materialxv)
#define glMatrixMode (glad_gles1_context.MatrixMode)
#define glMultMatrixf (glad_gles1_context.MultMatrixf)
#define glMultMatrixx (glad_gles1_context.MultMatrixx)
#define glMultiTexCoord4f (glad_gles1_context.MultiTexCoord4f)
#define glMultiTexCoord4x (glad_gles1_context.MultiTexCoord4x)
#define glNormal3f (glad_gles1_context.Normal3f)
#define glNormal3x (glad_gles1_context.Normal3x)
#define glNormalPointer (glad_gles1_context.NormalPointer)
#define glOrthof (glad_gles1_context.Orthof)
#define glOrthox (glad_gles1_context.Orthox)
#define glPixelStorei (glad_gles1_context.PixelStorei)
#define glPointParameterf (glad_gles1_context.PointParameterf)
#define glPointParameterfv (glad_gles1_context.PointParameterfv)
#define glPointParameterx (glad_gles1_context.PointParameterx)
#define glPointParameterxv (glad_gles1_context.PointParameterxv)
#define glPointSize (glad_gles1_context.PointSize)
#define glPointSizex (glad_gles1_context.PointSizex)
#define glPolygonOffset (glad_gles1_context.PolygonOffset)
#define glPolygonOffsetx (glad_gles1_context.PolygonOffsetx)
#define glPopMatrix (glad_gles1_context.PopMatrix)
#define glPushMatrix (glad_gles1_context.PushMatrix)
#define glReadPixels (glad_gles1_context.ReadPixels)
#define glRotatef (glad_gles1_context.Rotatef)
#define glRotatex (glad_gles1_context.Rotatex)
#define glSampleCoverage (glad_gles1_context.SampleCoverage)
#define glSampleCoveragex (glad_gles1_context.SampleCoveragex)
#define glScalef (glad_gles1_context.Scalef)
#define glScalex (glad_gles1_context.Scalex)
#define glScissor (glad_gles1_context.Scissor)
#define glShadeModel (glad_gles1_context.ShadeModel)
#define glStencilFunc (glad_gles1_context.StencilFunc)
#define glStencilMask (glad_gles1_context.StencilMask)
#define glStencilOp (glad_gles1_context.StencilOp)
#define glTexCoordPointer (glad_gles1_context.TexCoordPointer)
#define glTexEnvf (glad_gles1_context.TexEnvf)
#define glTexEnvfv (glad_gles1_context.TexEnvfv)
#define glTexEnvi (glad_gles1_context.TexEnvi)
#define glTexEnviv (glad_gles1_context.TexEnviv)
#define glTexEnvx (glad_gles1_context.TexEnvx)
#define glTexEnvxv (glad_gles1_context.TexEnvxv)
#define glTexImage2D (glad_gles1_context.TexImage2D)
#define glTexParameterf (glad_gles1_context.TexParameterf)
#define glTexParameterfv (glad_gles1_context.TexParameterfv)
#define glTexParameteri (glad_gles1_context.TexParameteri)
#define glTexParameteriv (glad_gles1_context.TexParameteriv)
#define glTexParameterx (glad_gles1_context.TexParameterx)
#define glTexParameterxv (glad_gles1_context.TexParameterxv)
#define glTexSubImage2D (glad_gles1_context.TexSubImage2D)
#define glTranslatef (glad_gles1_context.Translatef)
#define glTranslatex (glad_gles1_context.Translatex)
#define glVertexPointer (glad_gles1_context.VertexPointer)
#define glViewport (glad_gles1_context.Viewport)

GladGLES1Context *gladGetGLES1Context(void);
GLAD_API_CALL void gladSetGLES1Context(GladGLES1Context *context);

GLAD_API_CALL int gladLoadGLES1ContextUserPtr(GladGLES1Context *context,
                                              GLADuserptrloadfunc load,
                                              void *userptr);
GLAD_API_CALL int gladLoadGLES1Context(GladGLES1Context *context,
                                       GLADloadfunc load);

GLAD_API_CALL int gladLoadGLES1UserPtr(GLADuserptrloadfunc load, void *userptr);
GLAD_API_CALL int gladLoadGLES1(GLADloadfunc load);

#ifdef GLAD_GLES1

GLAD_API_CALL int gladLoaderLoadGLES1Context(GladGLES1Context *context);
GLAD_API_CALL int gladLoaderLoadGLES1(void);
GLAD_API_CALL void gladLoaderUnloadGLES1(void);

#endif /* GLAD_GLES1 */

#ifdef __cplusplus
}
#endif
#endif
