From ddf3aa79704ef3512184536f7be3b2c23893d55c Mon Sep 17 00:00:00 2001
From: Thomas Arcila <thomas.arcila@gmail.com>
Date: Fri, 20 Nov 2020 21:17:30 +0100
Subject: [PATCH] Make sure parameters are correctly forwarded

---
 include/spdlog/logger.h | 40 ++++++++++++++++++++--------------------
 1 file changed, 20 insertions(+), 20 deletions(-)

diff --git a/include/spdlog/logger.h b/include/spdlog/logger.h
index 7c5ba135..4f06266e 100644
--- a/include/spdlog/logger.h
+++ b/include/spdlog/logger.h
@@ -75,58 +75,58 @@ public:
 
     // FormatString is a type derived from fmt::compile_string
     template<typename FormatString, typename std::enable_if<fmt::is_compile_string<FormatString>::value, int>::type = 0, typename... Args>
-    void log(source_loc loc, level::level_enum lvl, const FormatString &fmt, const Args &...args)
+    void log(source_loc loc, level::level_enum lvl, const FormatString &fmt, Args &&...args)
     {
-        log_(loc, lvl, fmt, args...);
+        log_(loc, lvl, fmt, std::forward<Args>(args)...);
     }
 
     // FormatString is NOT a type derived from fmt::compile_string but is a string_view_t or can be implicitly converted to one
     template<typename... Args>
-    void log(source_loc loc, level::level_enum lvl, string_view_t fmt, const Args &...args)
+    void log(source_loc loc, level::level_enum lvl, string_view_t fmt, Args &&...args)
     {
-        log_(loc, lvl, fmt, args...);
+        log_(loc, lvl, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void log(level::level_enum lvl, const FormatString &fmt, const Args &...args)
+    void log(level::level_enum lvl, const FormatString &fmt, Args &&...args)
     {
-        log(source_loc{}, lvl, fmt, args...);
+        log(source_loc{}, lvl, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void trace(const FormatString &fmt, const Args &...args)
+    void trace(const FormatString &fmt, Args&&...args)
     {
-        log(level::trace, fmt, args...);
+        log(level::trace, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void debug(const FormatString &fmt, const Args &...args)
+    void debug(const FormatString &fmt, Args &&...args)
     {
-        log(level::debug, fmt, args...);
+        log(level::debug, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void info(const FormatString &fmt, const Args &...args)
+    void info(const FormatString &fmt, Args &&...args)
     {
-        log(level::info, fmt, args...);
+        log(level::info, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void warn(const FormatString &fmt, const Args &...args)
+    void warn(const FormatString &fmt, Args &&...args)
     {
-        log(level::warn, fmt, args...);
+        log(level::warn, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void error(const FormatString &fmt, const Args &...args)
+    void error(const FormatString &fmt, Args &&...args)
     {
-        log(level::err, fmt, args...);
+        log(level::err, fmt, std::forward<Args>(args)...);
     }
 
     template<typename FormatString, typename... Args>
-    void critical(const FormatString &fmt, const Args &...args)
+    void critical(const FormatString &fmt, Args &&...args)
     {
-        log(level::critical, fmt, args...);
+        log(level::critical, fmt, std::forward<Args>(args)...);
     }
 
     template<typename T>
@@ -326,7 +326,7 @@ protected:
 
     // common implementation for after templated public api has been resolved
     template<typename FormatString, typename... Args>
-    void log_(source_loc loc, level::level_enum lvl, const FormatString &fmt, const Args &...args)
+    void log_(source_loc loc, level::level_enum lvl, const FormatString &fmt, Args &&...args)
     {
         bool log_enabled = should_log(lvl);
         bool traceback_enabled = tracer_.enabled();
@@ -337,7 +337,7 @@ protected:
         SPDLOG_TRY
         {
             memory_buf_t buf;
-            fmt::format_to(buf, fmt, args...);
+            fmt::format_to(buf, fmt, std::forward<Args>(args)...);
             details::log_msg log_msg(loc, name_, lvl, string_view_t(buf.data(), buf.size()));
             log_it_(log_msg, log_enabled, traceback_enabled);
         }
-- 
2.29.2.windows.2

