From 892d6f72040be8e806bf8764c182eb6aad4ff1b8 Mon Sep 17 00:00:00 2001
From: Thomas Arcila <thomas.arcila@gmail.com>
Date: Sat, 28 Nov 2020 07:37:46 +0100
Subject: [PATCH 2/2] Workaround g++ 10.2 crash by removing constify_if alias

---
 include/range/v3/view/cartesian_product.hpp | 23 +++++++++------------
 include/range/v3/view/concat.hpp            | 14 ++++++-------
 include/range/v3/view/cycle.hpp             |  6 ++----
 3 files changed, 18 insertions(+), 25 deletions(-)

diff --git a/include/range/v3/view/cartesian_product.hpp b/include/range/v3/view/cartesian_product.hpp
index c0acdf00e..625f847e8 100644
--- a/include/range/v3/view/cartesian_product.hpp
+++ b/include/range/v3/view/cartesian_product.hpp
@@ -146,13 +146,10 @@ namespace ranges
         private:
             using IsConst = meta::bool_<IsConst_>;
             friend cursor<true>;
-            template<typename T>
-            using constify_if = meta::const_if_c<IsConst_, T>;
             using difference_type =
                 common_type_t<std::intmax_t, range_difference_t<Views>...>;
-
-            constify_if<cartesian_product_view> * view_;
-            std::tuple<iterator_t<constify_if<Views>>...> its_;
+            meta::const_if_c<IsConst_, cartesian_product_view> * view_;
+            std::tuple<iterator_t<meta::const_if_c<IsConst_, Views>>...> its_;
 
             void next_(meta::size_t<1>)
             {
@@ -286,19 +283,19 @@ namespace ranges
                     at_end || bool(std::get<N - 1>(its_) ==
                                    ranges::end(std::get<N - 1>(view_->views_))));
             }
-            cursor(end_tag, constify_if<cartesian_product_view> * view,
+            cursor(end_tag, meta::const_if_c<IsConst_, cartesian_product_view> * view,
                    std::true_type) // common_with
               : cursor(begin_tag{}, view)
             {
                 CPP_assert(
-                    common_range<meta::at_c<meta::list<constify_if<Views>...>, 0>>);
+                    common_range<meta::at_c<meta::list<meta::const_if_c<IsConst_, Views>...>, 0>>);
                 std::get<0>(its_) = ranges::end(std::get<0>(view->views_));
             }
-            cursor(end_tag, constify_if<cartesian_product_view> * view,
+            cursor(end_tag, meta::const_if_c<IsConst_, cartesian_product_view> * view,
                    std::false_type) // !common_with
               : cursor(begin_tag{}, view)
             {
-                using View0 = meta::at_c<meta::list<constify_if<Views>...>, 0>;
+                using View0 = meta::at_c<meta::list<meta::const_if_c<IsConst_, Views>...>, 0>;
                 CPP_assert(!common_range<View0> && random_access_range<View0> &&
                            sized_range<View0>);
                 std::get<0>(its_) += ranges::distance(std::get<0>(view->views_));
@@ -308,7 +305,7 @@ namespace ranges
             using value_type = std::tuple<range_value_t<Views>...>;
 
             cursor() = default;
-            explicit cursor(begin_tag, constify_if<cartesian_product_view> * view)
+            explicit cursor(begin_tag, meta::const_if_c<IsConst_, cartesian_product_view> * view)
               : view_(view)
               , its_(tuple_transform(view->views_, ranges::begin))
             {
@@ -316,11 +313,11 @@ namespace ranges
                 // empty and this "begin" iterator needs to become an "end" iterator.
                 check_at_end_(meta::size_t<sizeof...(Views)>{});
             }
-            explicit cursor(end_tag, constify_if<cartesian_product_view> * view)
+            explicit cursor(end_tag, meta::const_if_c<IsConst_, cartesian_product_view> * view)
               : cursor(
                     end_tag{}, view,
                     meta::bool_<
-                        common_range<meta::at_c<meta::list<constify_if<Views>...>, 0>>>{})
+                        common_range<meta::at_c<meta::list<meta::const_if_c<IsConst_, Views>...>, 0>>>{})
             {}
             template(bool Other)(
                 /// \pre
@@ -329,7 +326,7 @@ namespace ranges
               : view_(that.view_)
               , its_(std::move(that.its_))
             {}
-            common_tuple<range_reference_t<constify_if<Views>>...> read() const
+            common_tuple<range_reference_t<meta::const_if_c<IsConst_, Views>>...> read() const
             {
                 return tuple_transform(its_, detail::dereference_fn{});
             }
diff --git a/include/range/v3/view/concat.hpp b/include/range/v3/view/concat.hpp
index 6b1e5c8a0..eb19ea8e9 100644
--- a/include/range/v3/view/concat.hpp
+++ b/include/range/v3/view/concat.hpp
@@ -83,10 +83,8 @@ namespace ranges
         private:
             friend struct sentinel<!IsConst>;
             friend struct cursor<IsConst>;
-            template<typename T>
-            using constify_if = meta::const_if_c<IsConst, T>;
-            using concat_view_t = constify_if<concat_view>;
-            sentinel_t<constify_if<meta::back<meta::list<Rngs...>>>> end_;
+            using concat_view_t = meta::const_if_c<IsConst, concat_view>;
+            sentinel_t<meta::const_if_c<IsConst, meta::back<meta::list<Rngs...>>>> end_;
 
         public:
             sentinel() = default;
@@ -110,9 +108,9 @@ namespace ranges
             friend struct cursor<!IsConst>;
             template<typename T>
             using constify_if = meta::const_if_c<IsConst, T>;
-            using concat_view_t = constify_if<concat_view>;
+            using concat_view_t = meta::const_if_c<IsConst, concat_view>;
             concat_view_t * rng_;
-            variant<iterator_t<constify_if<Rngs>>...> its_;
+            variant<iterator_t<meta::const_if_c<IsConst, Rngs>>...> its_;
 
             template<std::size_t N>
             void satisfy(meta::size_t<N>)
@@ -260,7 +258,7 @@ namespace ranges
 
         public:
             // BUGBUG what about rvalue_reference and common_reference?
-            using reference = common_reference_t<range_reference_t<constify_if<Rngs>>...>;
+            using reference = common_reference_t<range_reference_t<meta::const_if_c<IsConst, Rngs>>...>;
             using single_pass = meta::or_c<single_pass_iterator_<iterator_t<Rngs>>...>;
             cursor() = default;
             cursor(concat_view_t * rng, begin_tag)
@@ -295,7 +293,7 @@ namespace ranges
                 -> CPP_ret(bool)(
                     /// \pre
                     requires //
-                        equality_comparable<variant<iterator_t<constify_if<Rngs>>...>>)
+                        equality_comparable<variant<iterator_t<meta::const_if_c<IsConst, Rngs>>...>>)
             {
                 return its_ == pos.its_;
             }
diff --git a/include/range/v3/view/cycle.hpp b/include/range/v3/view/cycle.hpp
index 10c167131..bca20b4ba 100644
--- a/include/range/v3/view/cycle.hpp
+++ b/include/range/v3/view/cycle.hpp
@@ -62,10 +62,8 @@ namespace ranges
         {
         private:
             friend struct cursor<!IsConst>;
-            template<typename T>
-            using constify_if = meta::const_if_c<IsConst, T>;
-            using cycled_view_t = constify_if<cycled_view>;
-            using CRng = constify_if<Rng>;
+            using cycled_view_t = meta::const_if_c<IsConst, cycled_view>;
+            using CRng = meta::const_if_c<IsConst, Rng>;
             using iterator = iterator_t<CRng>;
 
             cycled_view_t * rng_{};
-- 
2.28.0

