From 48d053163697925ad196b8cec805a44158578e69 Mon Sep 17 00:00:00 2001
From: Larry Gritz <lg@larrygritz.com>
Date: Sat, 26 Jun 2021 13:49:46 -0700
Subject: [PATCH 3/3] fmt related fixes (#3007)

* New fmt 8.0.0 is out -- make sure we test against both that and their
  current master.

* Starting with fmt 8.0, and in accordance with C++20 std::format's
  final incarnation, the format string needs to be constant, for the
  sake of compile time checks. To use a nonconstant format string, as
  we do for these wrapper functions, we need to lean on vformat.

* For Strutil::sprintf, just `using ::fmt::sprintf` and eliminate the
  wrapper entirely. (Though we express the wrapper inside
  `#ifdef OIIO_OXYGEN_ONLY` so that it fully appears in any docs we
  generate.)
---
 .github/workflows/ci.yml           |  5 ++---
 src/doc/Doxyfile                   |  1 +
 src/include/OpenImageIO/strutil.h  | 20 ++++++++++++++------
 src/include/OpenImageIO/typedesc.h |  8 ++++----
 4 files changed, 21 insertions(+), 13 deletions(-)

diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 824e6410..41ae467c 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -409,8 +409,7 @@ jobs:
       PYBIND11_VERSION: v2.6.2
       PYTHON_VERSION: 3.8
       WEBP_VERSION: v1.1.0
-      MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=master
-      # MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=7.1.3
+      MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=8.0.0
       USE_OPENVDB: 0
       # The old installed OpenVDB has a TLS conflict with Python 3.8
     steps:
@@ -466,7 +465,7 @@ jobs:
       # PYBIND11_VERSION: master
       PYTHON_VERSION: 3.8
       WEBP_VERSION: master
-      MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=7.1.3
+      MY_CMAKE_FLAGS: -DBUILD_FMT_VERSION=master
       USE_OPENVDB: 0
       # The old installed OpenVDB has a TLS conflict with Python 3.8
     steps:
diff --git a/src/doc/Doxyfile b/src/doc/Doxyfile
index c641aa6f..1004b6ec 100644
--- a/src/doc/Doxyfile
+++ b/src/doc/Doxyfile
@@ -2155,6 +2155,7 @@ INCLUDE_FILE_PATTERNS  = *.h
 # This tag requires that the tag ENABLE_PREPROCESSING is set to YES.
 
 PREDEFINED             = DOXYGEN_SHOULD_SKIP_THIS \
+                         OIIO_DOXYGEN_ONLY:=1 \
                          OIIO_NO_SANITIZE_ADDRESS:= \
                          OIIO_API:= \
                          OIIO_HOSTDEVICE= \
diff --git a/src/include/OpenImageIO/strutil.h b/src/include/OpenImageIO/strutil.h
index 41cb0b0b..50061b19 100644
--- a/src/include/OpenImageIO/strutil.h
+++ b/src/include/OpenImageIO/strutil.h
@@ -86,11 +86,15 @@ void OIIO_API sync_output (std::ostream &file, string_view str);
 /// works with any types that understand stream output via '<<'.
 /// The formatting of the string will always use the classic "C" locale
 /// conventions (in particular, '.' as decimal separator for float values).
-template<typename... Args>
-inline std::string sprintf (const char* fmt, const Args&... args)
+#ifdef OIIO_DOXYGEN_ONLY
+template<typename Str, typename... Args>
+inline std::string sprintf(const Str& fmt, Args&&... args)
 {
-    return ::fmt::sprintf (fmt, args...);
+    return ::fmt::sprintf(fmt, args...);
 }
+#else
+using ::fmt::sprintf;
+#endif
 
 
 
@@ -120,10 +124,14 @@ inline std::string sprintf (const char* fmt, const Args&... args)
 ///
 
 namespace fmt {
-template<typename... Args>
-inline std::string format (const char* fmt, const Args&... args)
+template<typename Str, typename... Args>
+inline std::string format(const Str& fmt, Args&&... args)
 {
-    return ::fmt::format (fmt, args...);
+#if FMT_VERSION >= 70000
+    return ::fmt::vformat(fmt, ::fmt::make_format_args(args...));
+#else
+    return ::fmt::format(fmt, args...);
+#endif
 }
 } // namespace fmt
 
diff --git a/src/include/OpenImageIO/typedesc.h b/src/include/OpenImageIO/typedesc.h
index 6f3ac509..4860a073 100644
--- a/src/include/OpenImageIO/typedesc.h
+++ b/src/include/OpenImageIO/typedesc.h
@@ -558,8 +558,8 @@ FMT_BEGIN_NAMESPACE
 template <>
 struct formatter<OIIO::TypeDesc> {
     // Parses format specification
-    // C++14: constexpr auto parse(format_parse_context& ctx) {
-    auto parse(format_parse_context &ctx) -> decltype(ctx.begin()) // c++11
+    // C++14: constexpr auto parse(format_parse_context& ctx) const {
+    auto parse(format_parse_context &ctx) -> decltype(ctx.begin()) const // c++11
     {
         // Get the presentation type, if any. Required to be 's'.
         auto it = ctx.begin(), end = ctx.end();
@@ -572,8 +572,8 @@ struct formatter<OIIO::TypeDesc> {
     }
 
     template <typename FormatContext>
-    auto format(const OIIO::TypeDesc& t, FormatContext& ctx) -> decltype(ctx.out()){
-        // C++14:   auto format(const point& p, FormatContext& ctx) {
+    auto format(const OIIO::TypeDesc& t, FormatContext& ctx) -> decltype(ctx.out()) const {
+        // C++14:   auto format(const OIIO::TypeDesc& p, FormatContext& ctx) const {
         // ctx.out() is an output iterator to write to.
         return format_to(ctx.out(), "{}", t.c_str());
     }
-- 
2.31.1

